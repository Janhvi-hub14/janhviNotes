3. package spec.RMO_Automation_Regression

import geb.spock.GebReportingSpec
import pageobjects.BaseClass
import pageobjects.HomePage
import pageobjects.LoginPage
import pageobjects.MoneyOrderPage
import spock.lang.Shared
import spock.lang.Unroll

class TC09_RMO_Verify_MO_Amount_Split_Above_2500 extends GebReportingSpec {

    @Shared
    def senderCountryCodeArray

    def senderCountryCode = "rmous"
    def sendAmount = "2600"
    def url = System.getProperty("geb.build.baseUrl")
    def userPassword = System.getProperty("userPassword")

    void setupSpec() {
        senderCountryCodeArray = System.getProperty("senderCountryCode").split(",")
    }

    @Unroll
    def "Verify MO amount is split into two orders if limit is 2500"() {
        given: "User navigates to login page and logs in using valid credentials"
        to LoginPage
        at LoginPage
        page.doLogin(userPassword, senderCountryCode, "", "", url, "")
        
        and: "User lands on the Home page and reads any pop-up messages"
        at HomePage
        page.readMsgPopUp()

        when: "User clicks on the Money Order link and navigates to Money Order page"
        page.clickMoneyOrderLink()

        then: "User accepts the time zone pop-up"
        page.acceptTimePopUp()

        and: "User lands on Money Order page"
        at MoneyOrderPage

        and: "User enables mock printing"
        page.enableMockPrinting()

        when: "User enters an MO amount of 2600"
        page.selectMoneyOrderAmount(sendAmount)

        then: "Verify the MO is split into two orders"
        page.verifyMOSplitIntoTwoOrders()

        and: "MO is printed"
        page.verifyMOIsPrinted()

        cleanup:
        page.clearSessionStorageAndCookies()
    }
}





package spec.RMO_Automation_Regression

import geb.spock.GebReportingSpec
import pageobjects.BaseClass
import pageobjects.HomePage
import pageobjects.LoginPage
import pageobjects.MoneyOrderPage
import spock.lang.Shared
import spock.lang.Unroll

class TC08_RMO_Verify_Adding_Up_To_20_Money_Orders extends GebReportingSpec {

    @Shared
    def senderCountryCodeArray

    def senderCountryCode = "rmous"
    def sendAmount = "100"
    def url = System.getProperty("geb.build.baseUrl")
    def userPassword = System.getProperty("userPassword")

    void setupSpec() {
        senderCountryCodeArray = System.getProperty("senderCountryCode").split(",")
    }

    @Unroll
    def "Verify user can add up to 20 Money Orders"() {
        given: "User navigates to login page and logs in using valid credentials"
        to LoginPage
        at LoginPage
        page.doLogin(userPassword, senderCountryCode, "", "", url, "")
        
        and: "User lands on the Home page and reads any pop-up messages"
        at HomePage
        page.readMsgPopUp()

        when: "User clicks on the Money Order link and navigates to Money Order page"
        page.clickMoneyOrderLink()

        then: "User accepts the time zone pop-up"
        page.acceptTimePopUp()

        and: "User lands on Money Order page"
        at MoneyOrderPage

        and: "User enables mock printing"
        page.enableMockPrinting()

        when: "User adds amounts to 20 Money Orders"
        (1..20).each { i ->
            page.selectMoneyOrderAmount("100")
        }

        then: "Verify MO series numbers and options for all orders"
        page.verifyMOSerialNumbers()
        page.verifyFeeOptionsForAllMoneyOrders()

        when: "User tries to add the 21st Money Order"
        page.selectMoneyOrderAmount("100")

        then: "An error message is displayed"
        page.verifyErrorMessage("You have reached the maximum limit of 20 money orders.")

        and: "MO is printed"
        page.verifyMOIsPrinted()

        cleanup:
        page.clearSessionStorageAndCookies()
    }
}
